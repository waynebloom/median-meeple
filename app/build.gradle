plugins {
    id 'com.android.application'
    id 'com.google.devtools.ksp' version '1.9.0-1.0.11'
    id 'com.google.gms.google-services'
    id 'com.google.dagger.hilt.android'
    id 'kotlin-kapt'
    id "io.gitlab.arturbosch.detekt" version "1.23.0"
    id 'org.jetbrains.kotlin.android'
}

detekt {
    config.setFrom("$projectDir/detekt-config.yml")
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "com.waynebloom.scorekeeper"
        minSdk 21
        targetSdk 34
        versionCode 14
        versionName "2024.1.1"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        ksp {
            arg(new RoomSchemaArgProvider(new File(projectDir, "schemas")))
            arg("room.incremental", "true")
        }
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
        debug {
            applicationIdSuffix ".debug"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    buildFeatures {
        compose true
        viewBinding true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    namespace 'com.waynebloom.scorekeeper'
}

dependencies {

    // Compose
    implementation "androidx.compose.material3:material3:1.2.1"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation "androidx.compose.ui:ui-test-manifest:$compose_version"
    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation "androidx.compose.ui:ui-viewbinding:$compose_version"

    // shimmer effect
    implementation("com.valentinilk.shimmer:compose-shimmer:1.3.0")

    // DI
    implementation "com.google.dagger:hilt-android:2.47"
    kapt "com.google.dagger:hilt-android-compiler:2.47"
    implementation "androidx.hilt:hilt-navigation-compose:1.0.0"
    kapt "androidx.hilt:hilt-compiler:1.0.0"

    // Lifecycle
    def lifecycle_version = "2.7.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-compose:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Navigation
    implementation "androidx.navigation:navigation-compose:$nav_version"

    // Admob
    implementation 'com.google.android.gms:play-services-ads:22.1.0'

    // KSP (support for Room)
    implementation "com.google.devtools.ksp:symbol-processing-api:1.9.0-1.0.11"

    // Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    ksp "androidx.room:room-compiler:$room_version"

    // UI
    implementation 'androidx.activity:activity-compose:1.9.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.12.0'

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:33.1.0')

    // Testing
    implementation 'androidx.test.ext:junit-ktx:1.1.5'
    androidTestImplementation "androidx.room:room-testing:2.6.1"
    androidTestImplementation "androidx.test:runner:1.5.2"
}

// This is required to run DB migration tests
class RoomSchemaArgProvider implements CommandLineArgumentProvider {

    @InputDirectory
    @PathSensitive(PathSensitivity.RELATIVE)
    File schemaDir

    RoomSchemaArgProvider(File schemaDir) {
        this.schemaDir = schemaDir
    }

    @Override
    Iterable<String> asArguments() {
        // Note: If you're using KAPT and javac, change the line below to
        // return ["-Aroom.schemaLocation=${schemaDir.path}".toString()].
        return ["room.schemaLocation=${schemaDir.path}".toString()]
    }
}